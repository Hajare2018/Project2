"use client";

import React, { useState, useEffect, useRef } from "react";
import { CKEditor } from "@ckeditor/ckeditor5-react";
import type { CKEditorEvent } from "@ckeditor/ckeditor5-react";
import ClassicEditor from "ckeditor5/build/ckeditor";
import "ckeditor5/ckeditor5.css";
// import useAxios from "../../utils/hook/useAxios";
import type { AxiosInstance } from "axios";

type Props = {
  data: string;
  onChange: (event: CKEditorEvent, data: string) => void;
  onBlur: () => void;
  disabled: boolean;
};

export default function CKEditorModel({ data, onChange, onBlur, disabled }: Props) {
  const axiosInstance: AxiosInstance = useAxios();
  const editorContainerRef = useRef<HTMLDivElement>(null);
  const editorRef = useRef<HTMLDivElement>(null);
  const [isLayoutReady, setIsLayoutReady] = useState<boolean>(false);

  useEffect(() => {
    setIsLayoutReady(true);
    return () => setIsLayoutReady(false);
  }, []);

  class CustomUploadAdapter {
    loader: any;
    constructor(loader: any) {
      this.loader = loader;
    }

    // upload() {
    //   return this.loader.file.then((file: File) => {
    //     const maxFileSize = 50 * 1024 * 1024;
    //     if (file.size > maxFileSize) {
    //       alert("File size exceeds the maximum allowed limit of 50MB.");
    //       return;
    //     }

    //     const formData = new FormData();
    //     formData.append("documentFile", file);

    //     return axiosInstance
    //       .post("documentService/uploading", formData, {
    //         headers: {
    //           "Content-Type": "multipart/form-data",
    //         },
    //       })
    //       .then((response) => {
    //         const fileUrl = response?.data?.data[0]?.documentPath;
    //         return { default: fileUrl };
    //       })
    //       .catch((error) => {
    //         console.error("Image upload failed:", error);
    //         return Promise.reject(error);
    //       });
    //   });
    // }

    abort() {}
  }

  function CustomUploadAdapterPlugin(editor: any) {
    editor.plugins.get("FileRepository").createUploadAdapter = (loader: any) => {
      return new CustomUploadAdapter(loader);
    };
  }

  const editorConfig = {
    extraPlugins: [CustomUploadAdapterPlugin],
    toolbar: {
      items: [
        "undo",
        "redo",
        "|",
        "showBlocks",
        "selectAll",
        "|",
        "heading",
        "style",
        "|",
        "fontSize",
        "fontFamily",
        "fontColor",
        "fontBackgroundColor",
        "|",
        "bold",
        "italic",
        "underline",
        "strikethrough",
        "subscript",
        "superscript",
        "code",
        "removeFormat",
        "|",
        "specialCharacters",
        "horizontalLine",
        "link",
        "highlight",
        "blockQuote",
        "codeBlock",
        "|",
        "alignment",
        "|",
        "bulletedList",
        "numberedList",
        "outdent",
        "indent",
        "|",
        "accessibilityHelp",
        "|",
        "imageUpload",
        "mediaEmbed",
      ],
      shouldNotGroupWhenFull: true,
    },
    fontFamily: {
      supportAllValues: true,
    },
    fontSize: {
      options: [10, 12, 14, "default", 18, 20, 22],
      supportAllValues: true,
    },
    heading: {
      options: [
        { model: "paragraph", title: "Paragraph", class: "ck-heading_paragraph" },
        { model: "heading1", view: "h1", title: "Heading 1", class: "ck-heading_heading1" },
        { model: "heading2", view: "h2", title: "Heading 2", class: "ck-heading_heading2" },
        { model: "heading3", view: "h3", title: "Heading 3", class: "ck-heading_heading3" },
        { model: "heading4", view: "h4", title: "Heading 4", class: "ck-heading_heading4" },
        { model: "heading5", view: "h5", title: "Heading 5", class: "ck-heading_heading5" },
        { model: "heading6", view: "h6", title: "Heading 6", class: "ck-heading_heading6" },
      ],
    },
    htmlSupport: {
      allow: [
        {
          name: /^.*$/,
          styles: true,
          attributes: true,
          classes: true,
        },
      ],
    },
    image: {
      toolbar: ["imageTextAlternative"],
    },
    mediaEmbed: {
      previewsInData: true,
    },
    link: {
      addTargetToExternalLinks: true,
      defaultProtocol: "https://",
      decorators: {
        toggleDownloadable: {
          mode: "manual",
          label: "Downloadable",
          attributes: {
            download: "file",
          },
        },
      },
    },
    placeholder: "Type or paste your content here!",
  };

  return (
    <div className="main-container">
      <div
        className="editor-container editor-container_classic-editor editor-container_include-style editor-container_include-block-toolbar"
        ref={editorContainerRef}
      >
        <div className="editor-container__editor knowledge-editor">
          <div ref={editorRef}>
            {isLayoutReady && (
              <CKEditor
                data={data}
                editor={ClassicEditor}
                config={editorConfig}
                onChange={(event, editor) => onChange(event, editor.getData())}
                onBlur={onBlur}
                disabled={disabled}
              />
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


import { useState, useEffect, useRef } from "react";
import { CKEditor } from "@ckeditor/ckeditor5-react";
import "ckeditor5/ckeditor5.css";

import {
  ClassicEditor,
  Alignment,
  Bold,
  Italic,
  Link,
  List,
  BlockQuote,
  Undo,
  Essentials,
  Paragraph,
  FontSize,
} from "ckeditor5";

const KnowledgeBaseCKEditor = ({ value, onChange, onBlur, placeholder }) => {
  const editorContainerRef = useRef(null);
  const editorRef = useRef(null);
  const [isLayoutReady, setIsLayoutReady] = useState(false);

  useEffect(() => {
    setIsLayoutReady(true);
    return () => setIsLayoutReady(false);
  }, []);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (editorRef.current && !editorRef.current.contains(event.target)) {
        onBlur(value);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [value, onBlur]);

  const editorConfig = {
    toolbar: {
      items: [
        "bold",
        "italic",
        "link",
        "alignment:left",
        "alignment:center",
        "alignment:right",
        "bulletedList",
        "numberedList",
        "blockQuote",
        "undo",
        "redo",
        "|",
        "fontSize",
      ],
      shouldNotGroupWhenFull: true,
    },
    plugins: [
      Essentials,
      Alignment,
      Bold,
      Italic,
      Link,
      List,
      BlockQuote,
      Undo,
      Paragraph,
      FontSize,
    ],
    alignment: {
      options: ["left", "center", "right"],
    },
    placeholder: placeholder,
  };

  return (
    <div>
      <div className="main-container">
        <div
          className="editor-container editor-container_classic-editor editor-container_include-style editor-container_include-block-toolbar"
          ref={editorContainerRef}
          style={{
            width: "100%",
            border: "dashed 1px green",
            margin: "auto",
            display: "block",
          }}
        >
          <div className="editor-container__editor">
            <div ref={editorRef}>
              {isLayoutReady && (
                <CKEditor
                  editor={ClassicEditor}
                  data={value}
                  onChange={(event, editor) => {
                    const data = editor.getData();
                    onChange(data);
                  }}
                  onBlur={(event, editor) => {
                    const data = editor.getData();
                    onBlur(data);
                  }}
                  config={editorConfig}
                />
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default KnowledgeBaseCKEditor;


import { useState, useEffect, useRef } from "react";
import { CKEditor } from "@ckeditor/ckeditor5-react";
import "ckeditor5/ckeditor5.css";
import {
  ClassicEditor,
  Essentials,
  Bold,
  Italic,
  Underline,
  Paragraph,
  Table,
  TableToolbar,
  RemoveFormat,
  Undo,
  HtmlEmbed,
} from "ckeditor5";

export default function CKEditorModelTemplate({ data, onChange, onBlur, disabled }) {
  const editorContainerRef = useRef(null);
  const editorRef = useRef(null);
  const [isLayoutReady, setIsLayoutReady] = useState(false);

  useEffect(() => {
    setIsLayoutReady(true);
    return () => setIsLayoutReady(false);
  }, []);

  // Function to clean the pasted content
  const cleanPastedContent = (editor) => {
    editor.plugins.get("Clipboard").on("inputTransformation", (evt, data) => {
      const viewFragment = data.content; // This is the pasted content in view format
      editor.model.change((writer) => {
        // Clean up the pasted content
        const walker = viewFragment.getWalker();
        for (const node of walker) {
          if (node.item.is("element")) {
            // Remove style attributes from each element
            writer.removeAttribute("style", node.item);
          }
        }
      });
    });
  };

  const editorConfig = {
    plugins: [
      Essentials,
      Bold,
      Italic,
      Underline,
      Paragraph,
      Table,
      TableToolbar,
      RemoveFormat,
      Undo,
      HtmlEmbed,
    ],
    toolbar: [
      "bold",
      "italic",
      "underline",
      "|",
      "undo",
      "redo",
      "|",
      "insertTable",
      "|",
      "removeFormat",
      "|",
      'htmlEmbed',
    ],
    table: {
      contentToolbar: ["tableColumn", "tableRow", "mergeTableCells"],
    },
    disallowedContent: "*{*}", // Disallow all inline styles
    allowedContent: "p h1 h2 h3 strong em ul ol li table tr th td",
  };

  return (
    <div>
      <div className="main-container">
        <div
          ref={editorContainerRef}
        >
          <div >
            <div ref={editorRef}>
              {isLayoutReady && (
                <CKEditor
                  data={data}
                  editor={ClassicEditor}
                  config={editorConfig}
                  onReady={(editor) => {
                    // Add the paste event listener when editor is ready
                    cleanPastedContent(editor);
                  }}
                  onChange={(event, editor) =>
                    onChange(event, editor.getData())
                  }
                  onBlur={onBlur}
                  disabled={disabled}
                />
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


import { useState, useEffect, useRef } from "react";
import { CKEditor } from "@ckeditor/ckeditor5-react";
import "ckeditor5/ckeditor5.css";

import {
  ClassicEditor,
  Alignment,
  Bold,
  Italic,
  Link,
  List,
  BlockQuote,
  Undo,
  Essentials,
  Paragraph,
  FontSize,
} from "ckeditor5";

const TicketCKEditor = ({ value, onChange, onBlur, placeholder }) => {
  const editorContainerRef = useRef(null);
  const editorRef = useRef(null);
  const [isLayoutReady, setIsLayoutReady] = useState(false);

  useEffect(() => {
    setIsLayoutReady(true);
    return () => setIsLayoutReady(false);
  }, []);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (editorRef.current && !editorRef.current.contains(event.target)) {
        onBlur(value);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [value, onBlur]);

  const editorConfig = {
    toolbar: {
      items: [
        "bold",
        "italic",
        "link",
        "alignment:left",
        "alignment:center",
        "alignment:right",
        "bulletedList",
        "numberedList",
        "blockQuote",
        "undo",
        "redo",
        "|",
        "fontSize",
      ],
      shouldNotGroupWhenFull: true,
    },
    plugins: [
      Essentials,
      Alignment,
      Bold,
      Italic,
      Link,
      List,
      BlockQuote,
      Undo,
      Paragraph,
      FontSize,
    ],
    alignment: {
      options: ["left", "center", "right"],
    },
    placeholder: placeholder,
  };

  return (
    <div>
      <div className="main-container">
        <div className="editor-container" ref={editorContainerRef}>
          <div className="editor-container__editor ticket-detail">
            <div ref={editorRef}>
              {isLayoutReady && (
                <CKEditor
                  editor={ClassicEditor}
                  data={value}
                  onChange={(event, editor) => {
                    const data = editor.getData();
                    onChange(data);
                  }}
                  onBlur={(event, editor) => {
                    const data = editor.getData();
                    onBlur(data);
                  }}
                  config={editorConfig}
                />
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TicketCKEditor;
